trigger:
  branches:
    include:
      - main
  paths:
    include:
      - Backend/**  

variables:
- name: githubRegistry
  value: https://github.com/Abhay189/Letter.git

- name: containerRegistryName
  value: letterregistry.azurecr.io

- name: dockerImageName
  value: letter_backend

- name: dockerImageTag
  value: $(Build.BuildId)

- name: AWS_REGION
  value: ap-south-1

- name: EKS_CLUSTER_NAME
  value: my-cluster

- group: letter-backend-variable-group 

pool: 
  name: EC2-Agents

stages:

- stage: SonarQube_Scan
  jobs:
  - job: SonarQube_Analysis
    steps:
    - checkout: self
    - task: SonarCloudPrepare@3
      inputs:
        SonarCloud: "SonarCloudService"
        organization: "abhay189"
        scannerMode: "CLI"
        configMode: "manual"
        cliProjectKey: "Abhay189_Letter"
        cliSources: "Backend"

    - script: |
        export PATH=$PATH:/home/ubuntu/sonar-scanner/sonar-scanner/bin
        sonar-scanner \
          -Dsonar.projectKey=Abhay189_Letter \
          -Dsonar.sources=Backend \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=$(SONARQUBE_TOKEN)
      displayName: "Run SonarQube Scan"

    - task: SonarCloudPublish@3
      inputs:
        pollingTimeoutSec: "300"
      displayName: "Publish SonarCloud Results"

- stage: Build
  dependsOn: SonarQube_Scan
  condition: succeeded()
  jobs:
  - job: Docker_Image_Build 
    steps:
    - script: | 
        echo "Building docker image from the git repository"
        docker build -t $(containerRegistryName)/$(dockerImageName):$(dockerImageTag) ./Backend

      displayName: Building docker image

- stage: Testing 
  jobs:
  - job: Testing_API_Endpoints 
    timeoutInMinutes: 3
    steps:
    - script: |
        echo "Spinning up docker container from previously created image"
        docker run --name letter-backend-container -p 8000:8000 $(containerRegistryName)/$(dockerImageName):$(dockerImageTag)
        
        echo "Executing django API Testcases"
        docker exec letter-backend-container python manage.py test chat.tests.test

        echo "Stopping docker container" 
        docker stop letter-backend-container

        echo "Deleting docker container"
        docker rm letter-backend-container
      displayName: Testing API Calls 

- stage: Artifact_storage
  jobs:
  - job: Storing_Image_Artifact_In_ACR
    steps:
    - script: | 
        echo "Logging in to ACR..."
        docker login $(containerRegistryName) -u $(DOCKER_USERNAME) -p $(DOCKER_PASSWORD)

        echo "Pushing Docker image to ACR registry"
        docker push $(containerRegistryName)/$(dockerImageName):$(dockerImageTag)

        echo "Tagging Docker image with latest tag..."
        docker tag $(containerRegistryName)/$(dockerImageName):$(dockerImageTag) $(containerRegistryName)/$(dockerImageName):latest

        echo "Pushing Docker image latest to ACR registry"
        docker push $(containerRegistryName)/$(dockerImageName):latest
      displayName: Storing Docker image in ACR 

- stage: Deploy
  dependsOn: Artifact_storage
  condition: succeeded()
  jobs:
  - job: Deploy_to_Kubernetes
    steps:
    - script: |
        echo "Installing AWS CLI..."
        sudo apt update
        sudo apt install -y curl unzip
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        aws --version
      displayName: "Install AWS CLI"

    - script: |
        echo "Installing kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
      displayName: "Install kubectl"

    - script: |
        echo "Logging into AWS CLI..."
        aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
        aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
        aws configure set region $(AWS_REGION)
        aws sts get-caller-identity
      displayName: "Authenticate AWS CLI"

    - script: |
        echo "Configuring kubectl for EKS..."
        aws eks --region $(AWS_REGION) update-kubeconfig --name $(EKS_CLUSTER_NAME)
        kubectl get nodes
      displayName: "Set Up kubectl with EKS"
    
    - script: |
        kubectl set image deployment/letter-backend-deployment letter-backend-container=letterregistry.azurecr.io/letter_backend:$(dockerImageTag)
        kubectl rollout status deployment/letter-backend-deployment 
      displayName: "Deploy Updated Image to Kubernetes"



- stage: Cleanup
  condition: always()  
  jobs: 
  - job: Cleanup_Job
    workspace:
      clean: all  
    steps:
    - script: | 
        echo "Removing latest build docker images"
        docker rmi $(containerRegistryName)/$(dockerImageName):latest
        docker rmi $(containerRegistryName)/$(dockerImageName):$(dockerImageTag)
      displayName: "Remove Docker Images"

    - script: |
        docker system prune -af
      displayName: "Remove Unused Docker Resources"





    




         



